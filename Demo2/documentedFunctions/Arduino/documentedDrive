#include <DualMC33926MotorShield.h>
#include <Encoder.h>

double pie = 3.14159;
const int motor_counts = 3200; //counts per one rotation of encoder
const double r = 3.0; //radius of the wheel in inches

//these are the controller variable that keep encoders at same speed and robot going straight
double kp = 0.30; 
double ki = 0.1;

//defining our encoders and setting up our motor control shield
Encoder encoderM1(3, 6);
Encoder encoderM2(2, 5);
DualMC33926MotorShield md;

//4 variables below are for the positioning of the wheels
double wheelThetaStart1;
double wheelThetaStart2;
double wheelDistStart1;
double wheelDistStart2;

double piDist = 2.0; //hardcoded distance we want the robot to travel
double fudgeFactor = 0.305; //error adjustment

unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input,output, setPoint;
double totalError;


void setup() {
  Serial.begin(115200);
  md.init();
  setPoint = 0;
}

//main loop that calls our drive funcion
void loop() {

  drive(piDist);
  
}

//this function takes in distance from pi and moves the robot forward a specified distance
//it does this while also accounting for error to keep the robot moving straight
void drive(int targetDist){

  int distance = targetDistance - fudgeFactor;

  //reading in counts from encoders and converting from counts to linear distance
  long enc1 = encoderM1.read();
  double wheelTheta1 = (2.0 * pie * (double)enc1) / (double)motor_counts;
  double wheelDistance1 = (wheelTheta1 * r)/12;

  long enc2 = encoderM2.read() *-1;
  double wheelTheta2 = (2.0 * pie * (double)enc2) / (double)motor_counts;
  double wheelDistance2 = (wheelTheta2 * r)/12;
  
  setPoint = (double)enc1;
  input = (double)enc2;
  output = computePI(input);
  delay(100);
  
  
  if(wheelDistance1 <= distance){
    md.setM1Speed(-200);
    md.setM2Speed(200 + output);
    //Serial.print(enc1);
    //Serial.print("\t");
    //Serial.println(wheelDistance1);
    //Serial.print("\t");
    //Serial.println(wheelDistance2);
  }
  else if(wheelDistance1 > distance){
    while(true){
    md.setM1Speed(0);
    md.setM2Speed(0);
    }
  }
}

//this function takes in the counts from the encoder 
double computePI(double input){
  currentTime = millis();
  elapsedTime = (double)(currentTime - previousTime)/1000;
  error = setPoint - input; //difference between encoder 1 and 2
  totalError += error * elapsedTime;

  double out = kp*error + ki*totalError;

  //resetting values to run again if necessary
  lastError = error;
  previousTime = currentTime;
  return out;
}
