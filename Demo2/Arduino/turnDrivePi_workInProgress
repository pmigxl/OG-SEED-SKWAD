#include <DualMC33926MotorShield.h>
#include <Encoder.h>
#include <Wire.h>

//robot and PI parameters
double pie = 3.14159;
bool flag;
const int motor_counts = 3200;
const double r = 3.0; //radius of the wheel in inches

double kp_drive = 0.30;
double ki_drive = 0.1;

double kp_angle = 0.40;
double ki_angle = 0.3;

Encoder encoderM1(3, 6);
Encoder encoderM2(2, 5);
DualMC33926MotorShield md;

//clk states
int M1_CLK_STATE = 0;
int M1_DT_STATE = 0;
int M2_CLK_STATE = 0;
int M2_DT_STATE = 0;


//distance and angle parameters
double wheelThetaStart1;
double wheelThetaStart2;
double wheelDistStart1;
double wheelDistStart2;
double distance = 2; //will be set by the pi at some point
double fudgeFactor = 0.305; 
double deg = 90; // to rotate - will be set by the Pi
double diameter = 0.9; //feet

//encoder parametrs
double enc1_double;
double enc2_double;
double enc2_OUT;

//PI parameters
unsigned long currentTimeTurn, previousTimeTurn, currentTimeDrive, previousTimeDrive;
double elapsedTimeTurn, elapsedTimeDrive;
double errorTurn;
double errorDrive;
double lastErrorTurn, lastErrorDrive;
double input, output, setPoint, inputDrive, outputDrive, setPointDrive;
double totalErrorTurn, totalErrorDrive, rateError;

bool driveFlag = false;
bool turnFlag = false;

//RASP PI SHIII
bool reading = 0;
bool request = 0;
int importantVar = 0;
#define SLAVE_ADDRESS 0x20
#define PI_ADDRESS 0x2a
double readAngle;

int currentState = 0; //current state for switch
int nextState = 0; //next state for switch
double angleTarget = 0;
double distanceTarget = 0;

int adjustError; 

void setup() {
  Serial.begin(115200);
  md.init();
  setPoint = 0;
  setPointDrive = 0;

  //Pi init
//  Wire.begin(PI_ADDRESS);
  //Wire.onReceive(PI_READ);
  //Wire.onRequest(PI_WRITE);
}




void loop() {
  
  /*turnFlag = true;
  while (turnFlag == true) {
    turn(deg);
  }
  driveFlag = true;
  while(driveFlag == true){
    drive(distance);
    }
    */

  switch(stateChanger){

    case BEGIN: //set everything to zero
      hardReset();
      angleTarget = 0;
      nextState = FIND;
      break;

    case FIND: //rotate to find marker
      turnFlag = true;
      angleTarget = 45; //data from the pi
      if (turnFlag == true){
        turn(angleTarget);
      } else {
        nextState = ADJUST;
      }
      break;

    case ADJUST: //make sure angle error is 0 so robot will go straight
      turnFlag = false;
      if ( adjustError >= -5 && adjustError <= 5){
        turnFlag = true;
        turn(2); // not actually right - just needs to turn   
      }else {
        adjustError = 0;
      }
      nextState = MOVE;
      break;

    case MOVE: //move robot specified distance read in from pi
       driveFlag = true;
       drive(distanceTarget);

      
      
  }
    
}

void drive(int dist) {
  double distanceTarget = dist - fudgeFactor;

  long enc1D = encoderM1.read();
  double wheelTheta1D = (2.0 * pie * (double)enc1D) / (double)motor_counts;
  double wheelDistance1D = (wheelTheta1D * r)/12;


  long enc2D = encoderM2.read() * -1;
  setPointDrive = (double)enc1D;
  inputDrive = (double)enc2D;
  outputDrive = computePI_drive(inputDrive);
  delay(100);
  double wheelTheta2D = (2.0 * pie * (double)enc2D) / (double)motor_counts;
  double wheelDistance2D = (wheelTheta2D * r) / 12;

  if (wheelDistance1D <= distanceTarget) {//put in distanceTarget
    md.setM1Speed(-200);
    md.setM2Speed(200 + outputDrive);
  }
  else if (wheelDistance1D > distanceTarget) {//put in distanceTarget
    driveFlag = false;
    md.setM1Speed(0);
    md.setM2Speed(0);

  }
}

//turn function
void turn(double dataAngle) { //need to duplicate for the other direction??
  double targetAngle = 3.141*diameter*dataAngle/360;

  long enc1T = encoderM1.read();
  double wheelTheta1 = (2.0 * pie * (double)enc1T) / (double)motor_counts;
  double wheelDistance1T = (wheelTheta1 * r) / 12;

  long enc2T = encoderM2.read() * -1;
  setPoint = (double)enc1T;
  input = (double)enc2T;
  output = computePI_angle(input);
  delay(100);
  double wheelTheta2 = (2.0 * pie * (double)enc2T) / (double)motor_counts;
  double wheelDistance2T = (wheelTheta2 * r) / 12;

  if (wheelDistance1T <= targetAngle) {
    md.setM1Speed(-100);
    md.setM2Speed(-100 + output);
  }
  else if (wheelDistance1T > targetAngle) {
    while(true){
    md.setM1Speed(0);
    md.setM2Speed(0); 
    }
    turnFlag = false;
    Serial.println("changing turnFlag");
    driveFlag = true;

  }
}

/*
  PID FUNCTIONS
  ---------------
*/
double computePI_angle(double input) { //controller for turning
  currentTimeTurn = millis();
  elapsedTimeTurn = (double)(currentTimeTurn - previousTimeTurn) / 1000;
  errorTurn = (-setPoint) - input;
  totalErrorTurn += errorTurn * elapsedTimeTurn;
  double outTurn = kp_angle * errorTurn + ki_angle * totalErrorTurn;

  lastErrorTurn = errorTurn;
  previousTimeTurn = currentTimeTurn;
  return outTurn;
}

double computePI_drive(double inputDrive) { // controller for moving forward
  currentTimeDrive = millis();
  elapsedTimeDrive = (double)(currentTimeDrive - previousTimeDrive) / 1000;
  errorDrive = setPointDrive - inputDrive;
  totalErrorDrive += errorDrive * elapsedTimeDrive;

  double outDrive = kp_drive * errorDrive + ki_drive * totalErrorDrive;

  lastErrorDrive = errorDrive;
  previousTimeDrive = currentTimeDrive;
  return outDrive;
}

//PI functions
/*
void PI_READ(int byteCount) {
  int data = 0;
  data = Wire.read(); // receive a byte as char
  recievedData = 1;
  reading = 1; //idk what this is yet

  
  }
  

void PI_WRITE() {
    
    String myNum = String(int(importantVar);//not quite sure what this is yet
    int string_length = myNum.length() + 1;
    char charArray[string_length];
    myNum.toCharArray(charArray, string_length);
    Wire.write(charArray[index]);
    ++index;
    if (index >= 3) {
         index = 0;
    }
    request = 1; //idk what this is
}
*/


void hardReset(){
  //set all changing variables for movement to zero
  turnFlag = false;
  driveFlag = false;
  deg = 0;
  distance = 0;
  md.setM1Speed(0);
  md.setM2Speed(0);
  readAngle = 0;
}

