// integrated turn and drive with FSM
#include <DualMC33926MotorShield.h>
#include <Encoder.h>
#include <Wire.h>

double pi = 3.14159;
double pie = 3.14159;
const int motor_counts = 3200;
const double r = 3.0; //radius of the wheel in inches
//integral and proportional terms
double kp = 0.40;
double ki = 0.3;
//encoder for M1 and M2
Encoder encoderM1(3, 6); //white wire M1: 3, yellow wire M1: 6
Encoder encoderM2(2, 5); //white wire M2: 2, yellow wire M2: 5
DualMC33926MotorShield md;

double wheelThetaStart1;
double wheelThetaStart2;
double wheelDistStart1;
double wheelDistStart2;
double diameter = 0.9; // diameter of robot's wheels in feet

//pwm is between 0 and 255, making the max 255
const double pwm_max = 255;
//voltage is a max of 6V from the battery, using saturation if exceeds this voltage
const double v_max = 6;


double enc1_double;
double enc2_double;
double enc2_OUT;

unsigned long currentTime, previousTime;
double elapsedTime;
//for turn fucntion
double error;
double lastError;
double input_turn, output_turn, setPoint_turn;
double totalError, rateError;

//for drive function
double errorDrive;
double lastErrorDrive;
double input,output, setPoint;
double totalErrorDrive;
double fudgeFactor = 0.305; //error adjustment

#define SLAVE_ADDRESS 0x20
#define PI_ADDRESS 0x2a
bool RECEIVED_DATA = 0; //only true if aruco marker is detected
int dataAngle;
int dataDist;
int index = 0;
double target = 0;
bool request = 0;
int words = 0;
int currentState = 0;
int nextState = 0;
int demoChooser = 1;

//defining case statement names
#define BEGIN 0
#define FOUND 1
#define TURN 2
#define MOVEP1 3
#define MOVEP2 4
#define DONE 5

//ANGLE BROUGHT IN FROM THE PI
double piAngle = 0;
double piDist = 0;
bool turnFlag = 0;
bool driveFlag = 0;

void setup() {
  //initializes the serial monitor, configs motor, and initalizes setPoint PI
  Serial.begin(115200);
  pinMode(12, INPUT);
  pinMode(13, OUTPUT);
  md.init();
  setPoint_turn = 0;
  setPoint = 0;

  //Pi init
  //Wire.begin(PI_ADDRESS);
  //Wire.onReceive(PI_READ);
  //Wire.onRequest(PI_WRITE);

  currentState = BEGIN;
}

void loop() {

  switch(currentState){

    case BEGIN:
    //set changing vars to 0
      md.setM1Speed(0);
      md.setM2Speed(0);
      piDist = 0;
      words = 0;
      piAngle = 0;
      //Serial.println("In BEGIN state");
      Serial.print("Received data is: ");
      Serial.print(RECEIVED_DATA);
      Serial.print("\t");
      Serial.println(currentState);
      nextState = FOUND;
      break;

    case FOUND:
    //set words to 234 if marker is detected
      Serial.println("In FOUND state");
      if(RECEIVED_DATA){//will have to change this loop based on what the pi is sending
        words = 234;
        piAngle = dataAngle;
        piDist = dataDist; 
        nextState = MOVEP1;
      }else{
        nextState = FOUND;
      }
      break;

    case TURN:
      Serial.println("In TURN state");
      turnFlag = true;

      Serial.print("Angle to rotate: ");
      Serial.println(piAngle);

      turn(piAngle);

      break;

    case MOVEP1:
      Serial.println("In MOVEP1 state");
      driveFlag = true;
      piDist = dataDist;
      Serial.print("Distnace to travel: ");
      Serial.println(piDist);
      drive(piDist);
      if (driveFlag == false){
        nextState = DONE;
      }

      break;

    case MOVEP2:
      Serial.println("In MOVEP2 state");
      driveFlag = true;
      piDist = dataDist;
      Serial.print("Distnace to travel: ");
      Serial.println(piDist);
      drive(piDist - 0.321);
      if (driveFlag == false){
        nextState = DONE;
      }

      break;

    case DONE:
      Serial.println("In DONE state");
      md.setM1Speed(0);
      md.setM2Speed(0);
      words = 0;
      piDist = 0;
      break;

    default:
      break;
  }
  currentState = nextState;
}

//this function takes in the counts from the encoder 
double computePI(double input){
  currentTime = millis();
  elapsedTime = (double)(currentTime - previousTime)/1000;
  error = setPoint - input; //difference between encoder 1 and 2
  totalError += error * elapsedTime;

  double out = kp*error + ki*totalError;

  //resetting values to run again if necessary
  lastError = error;
  previousTime = currentTime;
  return out;
}

//this function takes in distance from pi and moves the robot forward a specified distance
//it does this while also accounting for error to keep the robot moving straight
void drive(double targetDist){

  
  double distance = targetDist - fudgeFactor;

  //reading in counts from encoders and converting from counts to linear distance
  long enc1 = encoderM1.read();
  double wheelTheta1 = (2.0 * pie * (double)enc1) / (double)motor_counts;
  double wheelDistance1 = (wheelTheta1 * r)/12;

  long enc2 = encoderM2.read() *-1;

  
  setPoint = (double)enc1;
  input = (double)enc2;
  output = computePI(input);
  delay(100);
  double wheelTheta2 = (2.0 * pie * (double)enc2) / (double)motor_counts;
  double wheelDistance2 = (wheelTheta2 * r)/12;
  
  if(wheelDistance1 <= distance){
    md.setM1Speed(-200);
    md.setM2Speed(200 + output);
    //Serial.print(enc1);
    //Serial.print("\t");
    //Serial.println(wheelDistance1);
    //Serial.print("\t");
    //Serial.println(wheelDistance2);
  }
  else if(wheelDistance1 > distance){
    md.setM1Speed(0);
    md.setM2Speed(0);
    driveFlag = false;
  }
}


void turn(double deg_turn) {
  double angle = 3.141 * diameter * deg_turn / 360;           //angle is radians conversion from deg_turn inputted from the void loop
  long enc1 = encoderM1.read();                                            //reads the encoder of M1
  double wheelTheta1 = (2.0 * pi * (double)enc1) / (double)motor_counts;  //theta angle of the robot wheel
  double wheelDistance1 = (wheelTheta1 * r) / 12;              //linear distance of the robot


  long enc2 = encoderM2.read() * -1;
  double wheelTheta2 = (2.0 * pi * (double)enc2) / (double)motor_counts;      //reads the encoder of M2
  double wheelDistance2 = (wheelTheta2 * r) / 12;                              //linear distance of the robot

  setPoint_turn = (double)enc1;                                                    //encoder 2 should go to encoder 1 but negative, making the robot turn right or left
  input_turn = (double)enc2;                                                       //enc 2 is the input
  output_turn = computePI(input_turn);                                                   //call PI controller and set value to output from enc 2 value
  delay(100);

  int pwm_l = 0; //pwm values initialized
  int pwm_r = 0;

  //if (abs(output) > v_max) output = (v_max)*abs(output)/output;
  //tested code
  pwm_l = -(double)pwm_max * (double)output_turn / (double)v_max;                      //converts M1 and M2 encoders into the pwm values from the output
  pwm_r = -(double)pwm_max * (double)output_turn / (double)v_max;

  Serial.print(error);                                                      //prints out the pwm encoder values, distances, and angle determined
  Serial.print("\t");
  Serial.print(wheelDistance1);
  Serial.print("\t");
  Serial.print(wheelDistance2);
  Serial.print("\t");
  Serial.print(angle);
  Serial.print("\t");
  //Serial.print(data);
  Serial.print("\t");
  Serial.println(target);


  //  Serial.print("\t");
  //  Serial.print(pwm_r);
  //  Serial.print("\t");
  //  Serial.print(pwm_l);
  //  Serial.print("\t");
  //set the motor to the pwm values indicated by the M1 and M2
  md.setM1Speed(pwm_r);
  md.setM2Speed(pwm_l);
  if ((wheelDistance1 > angle) && (wheelDistance2 > angle)) {
    if (deg_turn <= 0) { //turn the robot to the left
      md.setM1Speed(100);
      md.setM2Speed(-100 + output_turn);
      Serial.print(enc1);
      Serial.print("\t");
      Serial.print(wheelDistance1);
      Serial.print("\t");
      Serial.println(wheelDistance2);
    }
  }
  else if (wheelDistance1 < angle) { //stop the robot on left condition
    if (deg_turn <= 0) {
      md.setM1Speed(0);
      md.setM2Speed(0);
    }
  }
  if (wheelDistance1 < angle) { //turn the robot to the right
    if (deg_turn > 0) {
      md.setM1Speed(-100);
      md.setM2Speed(-100 + output_turn);
      Serial.print(enc1);
      Serial.print("\t");
      Serial.print(wheelDistance1);
      Serial.print("\t");
      Serial.println(angle);
    }
  }
  else if (wheelDistance1 > angle) { //stop the robot on right condition
    if (deg_turn > 0) {
      md.setM1Speed(0);
      md.setM2Speed(0);
    }
  }
}
