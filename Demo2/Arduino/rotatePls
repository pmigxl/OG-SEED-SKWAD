#include <DualMC33926MotorShield.h>
#include <Encoder.h>
#include <Wire.h>

double pie = 3.14159;
bool flag;
const int motor_counts = 3200;
const double r = 3.0; //radius of the wheel in inches
const double pwm_max = 255;
const double v_max = 6;

double kp = 5;
double ki = 0;

Encoder encoderM1(3, 6);
Encoder encoderM2(2, 5);
DualMC33926MotorShield md;



int M1_CLK_STATE = 0;
int M1_DT_STATE = 0;
int M2_CLK_STATE = 0;
int M2_DT_STATE = 0;



double wheelThetaStart1;
double wheelThetaStart2;
double wheelDistStart1;
double wheelDistStart2;
//double deg = 90;
double diameter = 0.9; // feet
int data;
double distance;

double phi = 0;
int words = 0;
bool reading = 0;
bool request = 0;
bool RECEIVED_DATA = 0;

#define SLAVE_ADDRESS 0x20
#define PI_ADDRESS 0x2a


double enc1_double;
double enc2_double;
double enc2_OUT;

unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input, output, setPoint;
double totalError, rateError;

int index = 0;
int pwm_l = 0;
int pwm_r = 0;
double target = 0;



void setup() {
  Serial.begin(115200);
  pinMode(12, INPUT);
  pinMode(13, OUTPUT);
  md.init();
  setPoint = 0;

  Wire.begin(PI_ADDRESS);
  Wire.onReceive(PI_READ);
  Wire.onRequest(PI_WRITE);
}


void loop() {
  while (RECEIVED_DATA) {
  delay(10);
    if (data >= 128) {
      target = (256 - data);
    }
    else {
      target = -data;
    }
    Serial.print("data received: ");
    //Serial.println(data);

    long enc1 = encoderM1.read();
    double wheelTheta1 = (2.0 * pie * (double)enc1) / (double)motor_counts;
    double wheelDistance1 = (wheelTheta1 * r);

    long enc2 = encoderM2.read() * -1;
    double wheelTheta2 = (2.0 * pie * (double)enc2) / (double)motor_counts;
    double wheelDistance2 = (wheelTheta2 * r);

    phi = (wheelDistance1 - wheelDistance2) / (diameter * 12 * 2);

    setPoint = (double)enc1;
    input = (double)enc2;
    output = computePI();
    delay(100);

    int pwm_l = 0;
    int pwm_r = 0;

    if (abs(output) > v_max) output = (v_max) * abs(output) / output;

    pwm_l = (double)pwm_max * (double)output / (double)v_max;
    pwm_r = (double)pwm_max * (double)output / (double)v_max;

    Serial.print(error);
    Serial.print("\t");
    Serial.print(distance);
    Serial.print("\t");
    Serial.print(data);
    Serial.print("\t");
    Serial.println(target);

    if (target > 0) {
      md.setM1Speed(-80);
      md.setM2Speed(-80);
    }
    else if (target < 0) {
      md.setM1Speed(80);
      md.setM2Speed(0);
    }
    else {
      md.setM1Speed(0);
      md.setM2Speed(0);
    }
  }
}

double computePI() {
  currentTime = millis();
  elapsedTime = (double)(currentTime - previousTime) / 1000;
  distance = (diameter / 2) * 3.141 * data / 180;
  error = distance - phi;
  totalError += error * elapsedTime;
  double out = kp * error + ki * totalError;

  lastError = error;
  previousTime = currentTime;
  return out;
}


void PI_READ(int byteCount) {
  while (Wire.available()) {
    data = Wire.read();
    RECEIVED_DATA = 1;
    reading = 1;
  }
}
void PI_WRITE() {
  String myNum = String(int(words));
  int string_length = myNum.length() + 1;
  char charArray[string_length];
  myNum.toCharArray(charArray, string_length);

  // Sending a value to the Pi
  Wire.write(charArray[index]);
  ++index;
  if (index >= 3) {
    index = 0;
  }
}
