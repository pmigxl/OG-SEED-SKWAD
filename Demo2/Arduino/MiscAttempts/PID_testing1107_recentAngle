#include <DualMC33926MotorShield.h>
#include <Encoder.h>

double pie = 3.14159;
bool flag;
const int motor_counts = 3200;
const double r = 3.0; //radius of the wheel in inches

double kp = 0.30;
double ki = 0.1;

Encoder encoderM1(3, 6);
Encoder encoderM2(2, 5);
DualMC33926MotorShield md;



int M1_CLK_STATE = 0;
int M1_DT_STATE = 0;
int M2_CLK_STATE = 0;
int M2_DT_STATE = 0;



double wheelThetaStart1;
double wheelThetaStart2;
double wheelDistStart1;
double wheelDistStart2;
double distance = 6.0 - 0.305;



double enc1_double;
double enc2_double;
double enc2_OUT;

unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input,output;
double totalError, rateError;
double input1,input2,output1,output2;
double setPointM2 = -1000; //need to set the value for M2 using 1105
double setPointM1 = 1885; //values for M1 using 1105 code


void setup() {
  Serial.begin(115200);
  md.init();
  setPointM1 = 0;
}


void loop() {
  
  long enc1 = encoderM1.read();
  double wheelTheta1 = (2.0 * pie * (double)enc1) / (double)motor_counts;
  double wheelDistance1 = (wheelTheta1 * r)/12;

  
  long enc2 = encoderM2.read() *-1;
  
  input2 = (double)enc2;
  output2 = computeM2(input2);
  
  


  
  input1 = (double)enc1;
  output1 = computeM2(input1);
  delay(100);
  double wheelTheta2 = (2.0 * pie * (double)enc2) / (double)motor_counts;
  double wheelDistance2 = (wheelTheta2 * r)/12;
  
  
  
  if(wheelDistance1 <= distance){
    md.setM1Speed(-200-output1);
    md.setM2Speed(200 + output2);
    Serial.print(enc1);
    Serial.print("\t");
    Serial.println(wheelDistance1);
    Serial.print("\t");
    Serial.println(wheelDistance2);
  }
  else if(wheelDistance1 > distance){
    while(true){
    md.setM1Speed(0);
    md.setM2Speed(0);
    }
  }
  
}

double computeM1(double input){
  currentTime = millis();
  elapsedTime = (double)(currentTime-previousTime)/1000;
  error = setPointM1 - input;
  totalError += error * elapsedTime;

  double out = kp*error + ki*totalError;

  lastError = error;
  previousTime = currentTime;
  return out;
}

double computeM2(double input){
  currentTime = millis();
  elapsedTime = (double)(currentTime-previousTime)/1000;
  error = setPointM2 - input;
  totalError += error * elapsedTime;

  double out = kp*error + ki*totalError;

  lastError = error;
  previousTime = currentTime;
  return out;
}
