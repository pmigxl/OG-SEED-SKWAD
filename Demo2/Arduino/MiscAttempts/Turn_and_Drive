#include <DualMC33926MotorShield.h>
#include <Encoder.h>
//robot and PI parameters
double pie = 3.14159;
bool flag;
const int motor_counts = 3200;
const double r = 3.0; //radius of the wheel in inches

double kp_drive = 0.30;
double ki_drive = 0.1;

double kp_angle = 0.3;
double ki_angle = 0.2;

Encoder encoderM1(3, 6);
Encoder encoderM2(2, 5);
DualMC33926MotorShield md;

//clk states
int M1_CLK_STATE = 0;
int M1_DT_STATE = 0;
int M2_CLK_STATE = 0;
int M2_DT_STATE = 0;


//distance and angle parameters
double wheelThetaStart1;
double wheelThetaStart2;
double wheelDistStart1;
double wheelDistStart2;
double distance = 3 - 0.25;
//double deg = 90 - 7; fudge factor implemented
double deg = 90;
double diameter = 0.9; //feet
double distance_angle = 3.141 * diameter * deg / 360;

//encoder parametrs
double enc1_double;
double enc2_double;
double enc2_OUT;
//PI parameters
unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input, output, setPoint;
double totalError, rateError;

bool driveFlag = false;
bool turnFlag = false;

void setup() {
  Serial.begin(115200);
  md.init();
  setPoint = 0;
}




void loop() {
  turnFlag = true;
  while (turnFlag == true) {
    turn();
  }
  /*while(driveFlag == true){
    drive();
    }*/


}

void drive() {
  long enc1 = encoderM1.read();
  double wheelTheta1 = (2.0 * pie * (double)enc1) / (double)motor_counts;
  double wheelDistance1 = (wheelTheta1 * r) / 12;


  long enc2 = encoderM2.read() * -1;
  setPoint = (double)enc1;
  input = (double)enc2;
  output = computePI_drive(input);
  delay(100);
  double wheelTheta2 = (2.0 * pie * (double)enc2) / (double)motor_counts;
  double wheelDistance2 = (wheelTheta2 * r) / 12;



  if (wheelDistance1 <= distance) {
    md.setM1Speed(-200);
    md.setM2Speed(200 + output);
    Serial.print(enc1);
    Serial.print("\t");
    Serial.println(wheelDistance1);
    Serial.print("\t");
    Serial.println(wheelDistance2);
  }
  else if (wheelDistance1 > distance) {
    driveFlag = false;
    md.setM1Speed(0);
    md.setM2Speed(0);

  }
}

void turn() {
  long enc1 = encoderM1.read();
  double wheelTheta1 = (2.0 * pie * (double)enc1) / (double)motor_counts;
  double wheelDistance1 = (wheelTheta1 * r) / 12;


  long enc2 = encoderM2.read() * -1;
  setPoint = (double)enc1;
  input = (double)enc2;
  output = computePI_angle(input);
  delay(100);
  double wheelTheta2 = (2.0 * pie * (double)enc2) / (double)motor_counts;
  double wheelDistance2 = (wheelTheta2 * r) / 12;



  if (wheelDistance1 <= distance_angle) {
    md.setM1Speed(-150);
    md.setM2Speed(-150 + output);
    Serial.print(enc1);
    Serial.print("\t");
    Serial.print(wheelDistance1);
    Serial.print("\t");
    Serial.println(wheelDistance2);
  }
  else if (wheelDistance1 > distance_angle) {
    turnFlag = false;
    Serial.println("changing turnFlag");
    driveFlag = true;
    md.setM1Speed(0);
    md.setM2Speed(0);

  }
}

/*
  PID FUNCTIONS
  ---------------
*/
double computePI_angle(double input) {
  currentTime = millis();
  elapsedTime = (double)(currentTime - previousTime) / 1000;
  error = (-setPoint) - input;
  double thetaEnc = (-setPoint) - input;
  /*if (((distance_angle - thetaEnc) <= 5) && ((distance_angle - thetaEnc) >= -5)) {
    thetaEnc = distance_angle;
    error = 0;
  }
  else if (abs(distance_angle - thetaEnc) < 50) {
    error += distance_angle - thetaEnc;

  }
  else {
    error = 0;
  }
  */
  totalError += error * elapsedTime;
  double out = kp_angle * error + ki_angle * totalError;
  //  Serial.print("error:");
  //  Serial.print(error);
  //    Serial.print("\t");
  //  Serial.print(totalError);
  //    Serial.print("\t");
  //    Serial.println(out);

  lastError = error;
  previousTime = currentTime;
  return out;
}




double computePI_drive(double input) {
  currentTime = millis();
  elapsedTime = (double)(currentTime - previousTime) / 1000;
  error = setPoint - input;
  totalError += error * elapsedTime;

  double out = kp_drive * error + ki_drive * totalError;

  lastError = error;
  previousTime = currentTime;
  return out;
}
