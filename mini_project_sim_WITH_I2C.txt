//CPR should be CPR = 64
//Equation to convert to rad/sec: angle = C/CPR * 2pi

#include <Encoder.h>

#include <Wire.h>
#define ADDRESS 0x04

byte data[32];
byte split[4];
int write_to =  0;
int read_len = 0;


#define motor_pin 2
int sample_rate = 1600;
float CPR = 20;
unsigned long timer = 0;
float motor_voltage;
int encodeCount;
float degree;
float rad;
float ang_vel;
int read;
Encoder myEnc(2, 3);
void setup() {

  Serial.begin(ADDRESS);
  Wire.onRequest(send_data);
  Wire.onReceive(receive_data);

  pinMode(7, OUTPUT);
  pinMode(4, OUTPUT);
  digitalWrite(4, HIGH);	

  timer = 0;
  Serial.begin(19200);
}

void loop() {
  //used to measure the time in increments and display to the serial monitor
  timer = millis();
  while(millis() < timer + sample_rate){
    //analogWrite(motor_pin,0);
    //analogWrite(motor_pin,255);
    if((timer >= 1000)&&(timer <= 5000)){
      
      //prints out the encoder count values
      encodeCount = (myEnc.read())/4;
      Serial.println("encoder value: ");
      Serial.print(encodeCount);
      Serial.println("");
      //prints out the angle in degrees
      degree = (encodeCount/CPR)*360;
      Serial.println("Angle in degrees: ");
      Serial.print(degree);
      Serial.print(" degrees");
      Serial.println("");
      //prints out the angle in rads
      rad = (encodeCount/CPR)*(2*3.14159);
      Serial.print("Angle in radians: ");
      Serial.print(rad);
      Serial.print(" rads");
      Serial.println("");
      //prints out the time in milli
      Serial.println("Time: ");
      Serial.print(millis());
      Serial.print(" milli-sec");
      Serial.println("");
      //prints out the angular velocity
      ang_vel = rad/(millis()/1000);
      Serial.println("Angular velocity");
      Serial.print(ang_vel);
      Serial.print(" rads/sec");
      Serial.println("");
      read = analogRead(motor_pin);
      motor_voltage = read * (5/1023.0);
      Serial.println("Voltage");
      Serial.print(motor_voltage);
      Serial.print(" volts");
      Serial.println("");
      Serial.println("");
    }
    
  }
  
}

void receive_data(int num_byte){
  write_to  =   Wire.read( ) ; //read the address as not to overwrite data on read
 
  while ( Wire.available() ) { //read while data is available
    data[read_len] = Wire.read();
    read_len ++ ;
  }
  read_len = 0;
  //reconcatenate the split byte back into 1  floating point number
  requested_position=((2*pi)/360)*((data[0]<<24)|(data[1 ]<<16)|(data[2]<< 8)|(data[3]));
  
}

void send_data(){
        //Split up the angle into 4 bytes to be sent back to the pi
  long send_position = (long)(current_position*(360/(2*pi ) ) ) ;
  split[0] = send_position >> 24;
  split[1] = (send_position << 8) >> 24;
  split[2] = (send_position << 16) >> 24;
  split[3] = (send_position << 24) >> 24;
  Wire.write(split, 4); 
}



