
//This program reads in data from a raspberry pi and rotates an encoder to match the position specified by the pi.
//The encoder is rotated using the motor shield library and by reading in the position of the encoder.

#include <DualMC33926MotorShield.h>

DualMC33926MotorShield md;

//Pin A is CLK, Pin B is DT
const int PIN_A = 2;
const int PIN_B = 5;
const int PIN_C = 3;
const int PIN_D = 6;

//Program uses state machine to track encoderâ€™s position
bool A_STATE = 0;
bool B_STATE = 0;
bool C_STATE = 0;
bool D_STATE = 0;

int cnt; //motor encoder counts
int cnt2; 

int target = 0; // change this value to see the change
double motorVar = 0; //varible to hold the value on the motor
double currentPos = 0;
double currentPos2 = 0;
int error = 0; //integral error for i in PI controller
int error2 = 0;
int prevTime = 0; //previos time 
int currTime = 0; //current time
int prevPos = 0; // stores the previous position of the motor 
int prevPos2 = 0;

const double Kp = 3.5;
const double Ki = 0.01;

void setup() {
  
  pinMode(PIN_A, INPUT);
  pinMode(PIN_B, INPUT);
  pinMode(PIN_C, INPUT);
  pinMode(PIN_D, INPUT);
  pinMode(12,INPUT);
  pinMode(13, OUTPUT);

  Serial.begin(115200);
  
  //Interrupt handler setup
  attachInterrupt(digitalPinToInterrupt(2), TICK, CHANGE); 
  md.init(); // motor initialization
  delay(1000); //motor initialization delay

}

void loop() {
  
  currentPos = double(cnt)/4.44;
  currentPos2 = double(cnt2)/4.44;
  
  if (currentPos - target <=  5 && currentPos - target >=  -5){ //error management
    currentPos = target;               
    error = 0;                        
  }
  if (currentPos2 - target <=  5 && currentPos2 - target >=  -5){ //error management
    currentPos2 = target;               
    error = 0;                        
  }

  currTime = millis(); // current time
  if (currTime >= prevTime + 100){ // 10th of a second
    error += (currentPos - target);
    prevPos = currentPos; 
    prevTime = currTime; 
    motorVar = double(( target - currentPos )) * Kp + (Ki * double(error)); //calculate the motor movement
    md.setM1Speed( -1 * motorVar ); 
    error2 += (currentPos2 - target);
    prevPos2 = currentPos2; 
    prevTime = currTime; 
    motorVar = double(( target - currentPos2 )) * Kp + (Ki * double(error2)); //calculate the motor movement
    md.setM1Speed( -1 * motorVar );
  }
 
}


void TICK() {

//encoder 1 counts
  if ( cnt >= 1600 ) {
    cnt = 0;
  }

  A_STATE = digitalRead(PIN_A); //read current state of signal A
  B_STATE = digitalRead(PIN_B); //read current state of signal B
  
  if (A_STATE == B_STATE){
    cnt -= 1;
  }
  else {
    cnt += 1;
  }

//encoder 2 count
  if ( cn2t >= 1600 ) {
    cnt2 = 0;
  }

  C_STATE = digitalRead(PIN_C); //read current state of signal C
  D_STATE = digitalRead(PIN_D); //read current state of signal D
  
  if (C_STATE == D_STATE){
    cnt2 -= 1;
  }
  else {
    cnt2 += 1;
  }
   
}
