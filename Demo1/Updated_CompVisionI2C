#import necessary tools 
from cv2 import aruco
import cv2
import numpy as np
import math
from picamera.array import PiRGBArray
from picamera import PiCamera
import time
import smbus
import smbus2
import board
import adafruit_character_lcd.character_lcd_rgb_i2c as character_lcd


# LCD and I2C info
lcd_columns = 16
lcd_rows = 2
i2c = board.I2C()
lcd = character_lcd.Character_LCD_RGB_I2C(i2c, lcd_columns, lcd_rows)
lcd.clear()
abus = smbus.SMBus(1)
address = 0x2a
slave_address = 20

detect = 0
angle = 0
# Function to write info to the arduino and LCD, returns error if there is a communication error

def writeNumber(comDetect, comAngle):
   
    try:
        abus.write_byte(address,comOutput)
    except:
        print('io error')
    
    try:
        info = ""
        for i in range(0,3):
            info += chr(abus.read_byte(address));
        print(info)
        print('\n')
    except:
        print('io error')
    
    target = ''
    if ( comDetect == 0 ):
        target = 'Marker Not Detected'
    elif ( comDetect == 1 ):
        target = 'Marker Detected'
    lcd.message = str(target) + '\nAngle:'  + str(comAngle)  
    
    return -1


#specify marker size, aruco dictionary, and calibrate camera 
marker_size =50

with open ('camera_cal.npy', 'rb') as f:
    camera_matrix = np.load(f)
    camera_distortion = np.load(f)
    
aruco_dict = aruco.Dictionary_get(aruco.DICT_4X4_50)

cap = cv2.VideoCapture(0)

camera_width = 640
camera_height = 480
camera_frame_rate = 40

# def readNumber():
# number = bus.read_byte(address)
# return number

#until q is pressed, images will continously be taken, converted to greyscale, and if an ID is detected the math preformed and displayed to calculate the angle 
while True:

    # Adding user input for distance
    # varDist = input('Enter a distance 1 - 10 feet: ")
    # varDist = int(varDist)
    # if not varDist:
    # continue
    # writeNumber(varDist)
    # print("RPI: Hi Arduino, I sent you ", varDist, " feet")
    # time.sleep(1)
    # number = readNumber()
    # print("Arduino: Hey RPI, I received a digit ", number)
    # print

# Adding user input for angle of rotation
    # var = input('Enter an angle from 0 - 360 degrees: ")
    # varAngle = int(varAngle)
    # if not varAngle:
    # continue
    # writeNumber(varAngle)
    # print("RPI: Hi Arduino, I sent you ", varAngle, " feet")
    
    ret, frame = cap.read()

    grey = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    imgSize = grey.shape
    xCoord = (imgSize[1] / 2)
    yCoord = (imgSize[0] / 2)
    corners, ids, rejectedImgPoints = aruco.detectMarkers(grey, aruco_dict, camera_matrix, camera_distortion)

    if ids is not None:
            detect = 1 
            aruco.drawDetectedMarkers(frame, corners)
                
            for (markerCorner, markerID) in zip(corners, ids):
                # extract marker corners and convert them to integers
                corners = markerCorner.reshape((4,2))
                (topLeft, topRight, bottomRight, bottomLeft) = corners
                topRight = (int(topRight[0]), int(topRight[1]))
                bottomRight = (int(bottomRight[0]), int(bottomRight[1]))
                bottomLeft = (int(bottomLeft[0]), int(bottomLeft[1]))
                topLeft = (int(topLeft[0]), int(topLeft[1]))
                # compute and draw the center (x, y)-coordinates of the ArUco marker
                cX = int((topLeft[0] + bottomRight[0]) / 2.0)
                cY = int((topLeft[1] + bottomRight[1]) / 2.0)
                cv2.circle(grey, (cX, cY), 4, (0, 0, 255), -1)
                # Calculate the angle from camera to the object by using the provided formula
                angle = round( (57/2) * ( (cX - xCoord) / xCoord), 2 )
                # Use pixel manipulation to determine quadrants
                
                # Display the ID's and angle to video feed
            anglePrint = str(angle) + ' degrees'
            
            #rvec_list_all, tvec_list_all, _objPoints = aruco.estimatePoseSingleMarkers(corners, marker_size, camera_matrix, camera_distortion)
                
            #rvec= rvec_list_all[0][0]
            #tvec = tvec_list_all[0][0]
            
            #aruco.drawAxis(frame, camera_matrix, camera_distortion, rvec, tvec, 100)
            
            #rvec_flipped = rvec * -1
            #tvec_flipped = tvec * -1
            #rotation_matrix, jacobian = cv2.Rodrigues(rvec_flipped)
            #realworld_tvec = np.dot(rotation_matrix, tvec_flipped)
            
            #pitch, roll, yaw = rotationMatrixToEulerAngles(rotation_matrix)
            #angle = math.degrees(yaw)
            #tvec_str = "x=%4.0f y%4.0f angle=%4.0f"%(realworld_tvec[0], realworld_tvec[1], math.degrees(yaw))
            cv2.putText(grey, anglePrint, (topRight[0], topRight[1] - 15), cv2.FONT_HERSHEY_SIMPLEX,0.5, (0, 255, 0), 2)
            
            #cv2.putText(frame, tvec_str, (20,460), cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 255), 2, cv2.LINE_AA)
    if ids is None:
        detect = 0
        
    cv2.imshow("frame", frame)
    writeNumber(detect, angle )
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break
  
cap.release()
cv.destroyAllWindows()
    
