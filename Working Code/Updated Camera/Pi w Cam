from picamera.array import PiRGBArray
from picamera import PiCamera
import time
import cv2
import numpy
import sys
import math
import smbus
import smbus2
import board
import adafruit_character_lcd.character_lcd_rgb_i2c as character_lcd
#Python code for pi-
#take the setpoint that the pi reads from the aruco marker and send it to arduino

lcd_columns = 16
lcd_rows = 2

i2c = board.I2C()
lcd = character_lcd.Character_LCD_RGB_I2C(i2c, lcd_columns, lcd_rows)
lcd.clear()

abus = smbus.SMBus(1)
address = 0x2a
slave_address = 20
output= 0

data = 0


def writeNumber(variableName):
    try:
        abus.write_byte(address,variableName)
    except:
        print('io error')
    
    try:
        data = ""
        for i in range(0,3):
            data += chr(abus.read_byte(address));
        print(data)
        print('\n')
    except:
        print('io error')
    
    target = ''
    if ( variableName == 0 ):
        target = '00'
    elif ( variableName == 1 ):
        target = '090'
    elif ( variableName == 2 ):
        target = '180'
    elif ( variableName == 3 ):
        target = '270'
    lcd.message = 'Current: ' + str(data) + '\nTarget: ' + str(target) 
    
    return -1

    


def readLCD(setpoint):
    
    setPrint = 'Setpoint: ' + str(setpoint)
    lcd.message = setPrint 




with open ('camera_cal.npy', 'rb') as f:
    camera_matrix = np.load(f)
    camera_distortion = np.load(f)
    
aruco_dict = aruco.Dictionary_get(aruco.DICT_4X4_50)
marker_size =50

cap = cv2.VideoCapture(0)

camera_width = 640
camera_height = 480
camera_frame_rate = 40

while(True):
    
    ret, frame = cap.read()
    
    grey = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    corners, ids, rejectedImgPoints = aruco.detectMarkers(grey, aruco_dict, camera_matrix, camera_distortion)
  
    if ids is not None:
            aruco.drawDetectedMarkers(frame, corners)
            rvec_list_all, tvec_list_all, _objPoints = aruco.estimatePoseSingleMarkers(corners, marker_size, camera_matrix, camera_distortion)
                
            rvec= rvec_list_all[0][0]
            tvec = tvec_list_all[0][0]
            
            aruco.drawAxis(frame, camera_matrix, camera_distortion, rvec, tvec, 100)
            
            rvec_flipped = rvec * 1
            tvec_flipped = tvec * 1
            rotation_matrix, jacobian = cv2.Rodrigues(rvec_flipped)
            realworld_tvec = np.dot(rotation_matrix, tvec_flipped)
            
            pitch, roll, yaw = rotationMatrixToEulerAngles(rotation_matrix)
            
            tvec_str = "x=%4.0f y%4.0f angle=%4.0f"%(realworld_tvec[0], realworld_tvec[1], math.degrees(yaw))
            
            if (realworld_tvec[0] < 1 and realworld_tvec[1] < 1):
                output = 0
                print(output)
                
            elif (realworld_tvec[0] < 1 and realworld_tvec[1] > 1):
                output = 1
                print(output)
                
            elif (realworld_tvec[0] > 1 and realworld_tvec[1] < 1):
                output = 2
                print(output)
            elif (realworld_tvec[0] > 1 and realworld_tvec[1] > 1):
                output = 3
                print(output)
                
            writeNumber(output)
            cv2.putText(frame, tvec_str, (20,460), cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 255), 2, cv2.LINE_AA)
                
    cv2.imshow("frame", frame)

    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break
  
cap.release()
cv.destroyAllWindows()

  
  
       
 
       

 
